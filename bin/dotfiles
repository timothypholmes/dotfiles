#!/usr/bin/env bash

# Dotfiles CLI - Your personal command center
# Usage: dotfiles [command]

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m' # No Color

# Get dotfiles directory
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Banner
show_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
    ╔══════════════════════════════════════════════════════════════╗
    ║                                                              ║
    ║                    🚀 DOTFILES CLI 🚀                       ║
    ║                                                              ║
    ║                Your Personal Command Center                  ║
    ║                                                              ║
    ╚══════════════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
}

# System info
show_system_info() {
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}📊 SYSTEM INFO${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${GRAY}Host:${NC}          $(hostname)"
    echo -e "${GRAY}User:${NC}          $(whoami)"
    echo -e "${GRAY}Shell:${NC}         $SHELL"
    echo -e "${GRAY}Terminal:${NC}      $TERM"
    echo -e "${GRAY}Date:${NC}          $(date)"
    
    if command -v git >/dev/null 2>&1 && git rev-parse --git-dir >/dev/null 2>&1; then
        echo -e "${GRAY}Git Repo:${NC}     $(basename "$(git rev-parse --show-toplevel)")"
        echo -e "${GRAY}Git Branch:${NC}   $(git branch --show-current)"
    fi
    
    if [[ -n "$AWS_PROFILE" ]]; then
        echo -e "${GRAY}AWS Profile:${NC}  $AWS_PROFILE"
    fi
    
    echo
}

# Available topics
show_topics() {
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}📁 AVAILABLE TOPICS${NC}"
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    
    if [[ -d "$DOTFILES_DIR/topics" ]]; then
        for topic in "$DOTFILES_DIR/topics"/*; do
            if [[ -d "$topic" ]]; then
                local topic_name=$(basename "$topic")
                local description=""
                
                # Try to get description from install script
                if [[ -f "$topic/install.sh" ]]; then
                    description=$(head -5 "$topic/install.sh" | grep -E "^#.*" | tail -1 | sed 's/^# *//' || echo "")
                fi
                
                # Default descriptions for known topics
                case "$topic_name" in
                    "zsh") description="Shell configuration and plugins" ;;
                    "vim") description="Text editor configuration" ;;
                    "git") description="Version control configuration" ;;
                    "aws") description="AWS CLI tools and credential management" ;;
                    "ado") description="Azure DevOps pipeline and work item tools" ;;
                    "docker") description="Container management tools" ;;
                    "python") description="Python development tools" ;;
                    "tmux") description="Terminal multiplexer configuration" ;;
                    "ssh") description="SSH client configuration" ;;
                    "npm") description="Node.js package manager tools" ;;
                    "vscode") description="Code editor configuration" ;;
                    "starship") description="Cross-shell prompt configuration" ;;
                    "ghostty") description="Terminal emulator configuration" ;;
                esac
                
                printf "  ${CYAN}%-12s${NC} ${GRAY}%s${NC}\n" "$topic_name" "$description"
            fi
        done
    fi
    echo
}

# Available aliases by topic
show_aliases() {
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}⚡ AVAILABLE ALIASES & FUNCTIONS${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    
    # AWS aliases
    echo -e "${YELLOW}🔐 AWS:${NC}"
    echo -e "  ${CYAN}awsp <profile>${NC}       - Switch AWS profile"
    echo -e "  ${CYAN}awswho${NC}               - Show current AWS identity"
    echo -e "  ${CYAN}awsls${NC}                - List AWS profiles"
    echo -e "  ${CYAN}awsup${NC}                - Update credentials from clipboard"
    echo -e "  ${CYAN}ec2ls${NC}                - List EC2 instances"
    echo -e "  ${CYAN}s3ls${NC}                 - List S3 buckets"
    echo
    
    # ADO aliases
    echo -e "${YELLOW}🔄 Azure DevOps:${NC}"
    echo -e "  ${CYAN}ado-run <env>${NC}        - Run pipeline (dev/qa)"
    echo -e "  ${CYAN}ado-story 'title'${NC}    - Create new story"
    echo -e "  ${CYAN}ado-bug 'title'${NC}      - Create new bug"
    echo -e "  ${CYAN}ado-list${NC}             - List work items"
    echo
    
    # Docker aliases
    echo -e "${YELLOW}🐳 Docker:${NC}"
    echo -e "  ${CYAN}dcup${NC}                 - docker-compose up -d"
    echo -e "  ${CYAN}dcdown${NC}               - docker-compose down"
    echo -e "  ${CYAN}dps${NC}                  - docker ps"
    echo -e "  ${CYAN}docker-cleanup${NC}       - Clean up Docker resources"
    echo
    
    # Python aliases
    echo -e "${YELLOW}🐍 Python:${NC}"
    echo -e "  ${CYAN}py${NC}                   - python3"
    echo -e "  ${CYAN}mkvenv <name>${NC}        - Create virtual environment"
    echo -e "  ${CYAN}activate <name>${NC}      - Activate virtual environment"
    echo -e "  ${CYAN}pipr${NC}                 - Install requirements.txt"
    echo
    
    # Git aliases
    echo -e "${YELLOW}📝 Git:${NC}"
    echo -e "  ${CYAN}git st${NC}               - git status"
    echo -e "  ${CYAN}git lg${NC}               - git log --oneline --graph"
    echo -e "  ${CYAN}git amend${NC}            - git commit --amend"
    echo -e "  ${CYAN}git undo${NC}             - git reset --soft HEAD~1"
    echo
    
    # NPM aliases
    echo -e "${YELLOW}📦 NPM:${NC}"
    echo -e "  ${CYAN}ni${NC}                   - npm install"
    echo -e "  ${CYAN}nr <script>${NC}          - npm run"
    echo -e "  ${CYAN}ns${NC}                   - npm start"
    echo -e "  ${CYAN}nb${NC}                   - npm run build"
    echo
}

# Quick actions
show_quick_actions() {
    echo -e "${RED}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}🚀 QUICK ACTIONS${NC}"
    echo -e "${RED}═══════════════════════════════════════════════════════════════${NC}"
    
    echo -e "  ${CYAN}dotfiles update${NC}      - Update and sync dotfiles"
    echo -e "  ${CYAN}dotfiles edit${NC}        - Open dotfiles in editor"
    echo -e "  ${CYAN}dotfiles help${NC}        - Show this help menu"
    echo -e "  ${CYAN}dotfiles topics${NC}      - Show available topics"
    echo -e "  ${CYAN}dotfiles aliases${NC}     - Show available aliases"
    echo -e "  ${CYAN}dotfiles refresh${NC}     - Refresh shell and show dashboard"
    echo
}

# Commands
cmd_help() {
    show_banner
    show_system_info
    show_quick_actions
    echo -e "${GRAY}💡 Tip: Run 'dotfiles' without arguments for the full dashboard${NC}"
    echo
}

cmd_dashboard() {
    clear
    show_banner
    show_system_info
    show_topics
    show_aliases
    show_quick_actions
}

cmd_update() {
    echo -e "${BLUE}🔄 Updating dotfiles...${NC}"
    cd "$DOTFILES_DIR"
    ./bootstrap.sh --force
    echo -e "${GREEN}✅ Dotfiles updated successfully!${NC}"
}

cmd_edit() {
    if command -v code >/dev/null 2>&1; then
        echo -e "${BLUE}📝 Opening dotfiles in VS Code...${NC}"
        code "$DOTFILES_DIR"
    elif command -v vim >/dev/null 2>&1; then
        echo -e "${BLUE}📝 Opening dotfiles in Vim...${NC}"
        vim "$DOTFILES_DIR"
    else
        echo -e "${YELLOW}⚠️  No editor found. Opening directory...${NC}"
        open "$DOTFILES_DIR" 2>/dev/null || echo "Directory: $DOTFILES_DIR"
    fi
}

cmd_refresh() {
    echo -e "${BLUE}🔄 Refreshing shell...${NC}"
    
    # Source shell config
    if [[ -n "$ZSH_VERSION" ]]; then
        source ~/.zshrc 2>/dev/null || true
    elif [[ -n "$BASH_VERSION" ]]; then
        source ~/.bashrc 2>/dev/null || source ~/.bash_profile 2>/dev/null || true
    fi
    
    echo -e "${GREEN}✅ Shell refreshed!${NC}"
    echo
    cmd_dashboard
}

cmd_topics() {
    show_banner
    show_topics
}

cmd_aliases() {
    show_banner
    show_aliases
}

# Main command handler
main() {
    case "${1:-dashboard}" in
        "help"|"-h"|"--help")
            cmd_help
            ;;
        "dashboard"|"")
            cmd_dashboard
            ;;
        "update"|"sync")
            cmd_update
            ;;
        "edit"|"open")
            cmd_edit
            ;;
        "refresh"|"reload")
            cmd_refresh
            ;;
        "topics")
            cmd_topics
            ;;
        "aliases")
            cmd_aliases
            ;;
        *)
            echo -e "${RED}❌ Unknown command: $1${NC}"
            echo -e "${GRAY}Run 'dotfiles help' for available commands${NC}"
            exit 1
            ;;
    esac
}

main "$@"