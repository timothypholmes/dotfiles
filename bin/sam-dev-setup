#!/usr/bin/env bash

# SAM development environment setup script

echo "🚀 SAM Development Environment Setup"
echo "===================================="
echo

# Check if SAM is installed
if ! command -v sam &> /dev/null; then
    echo "❌ AWS SAM CLI not found. Please install it first:"
    echo "   brew install aws-sam-cli"
    exit 1
fi

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    echo "❌ Docker is not running. Please start Docker Desktop."
    exit 1
fi

echo "✅ SAM CLI and Docker are ready"
echo

# Get project details
read -p "Enter SAM application name: " app_name
if [[ -z "$app_name" ]]; then
    echo "❌ Application name is required"
    exit 1
fi

echo
echo "Select runtime:"
echo "1) Python 3.9 (recommended)"
echo "2) Python 3.8"
echo "3) Node.js 18.x"
echo "4) Java 11"
echo "5) .NET 6"
echo "6) Go 1.x"
read -p "Choose runtime [1-6]: " runtime_choice

case $runtime_choice in
    1) runtime="python3.9" ;;
    2) runtime="python3.8" ;;
    3) runtime="nodejs18.x" ;;
    4) runtime="java11" ;;
    5) runtime="dotnet6" ;;
    6) runtime="go1.x" ;;
    *) runtime="python3.9" ;;
esac

echo
echo "Select template:"
echo "1) Hello World (REST API)"
echo "2) Quick Start Web (Web application)"
echo "3) Quick Start CloudFormation (Infrastructure)"
echo "4) Step Functions (State machine)"
read -p "Choose template [1-4]: " template_choice

case $template_choice in
    1) template="hello-world" ;;
    2) template="quick-start-web" ;;
    3) template="quick-start-cloudformation" ;;
    4) template="step-functions-sample-app" ;;
    *) template="hello-world" ;;
esac

echo
echo "🔧 Creating SAM application..."
echo "   Name: $app_name"
echo "   Runtime: $runtime"
echo "   Template: $template"
echo

# Create the SAM application
sam init --name "$app_name" --runtime "$runtime" --app-template "$template" --no-interactive

if [[ $? -eq 0 && -d "$app_name" ]]; then
    cd "$app_name"
    
    echo "✅ SAM application created successfully!"
    echo "📁 Directory: $(pwd)"
    echo
    
    # Create development scripts
    echo "📝 Creating development scripts..."
    
    # Create dev script
    cat > dev.sh << 'EOF'
#!/bin/bash
# Development script for SAM application

echo "🔨 Building SAM application..."
sam build

if [[ $? -eq 0 ]]; then
    echo "🌐 Starting local API on port 3000..."
    echo "   API available at: http://localhost:3000"
    echo "   Press Ctrl+C to stop"
    sam local start-api --port 3000
else
    echo "❌ Build failed"
    exit 1
fi
EOF

    # Create test script
    cat > test.sh << 'EOF'
#!/bin/bash
# Test script for SAM application

echo "🔨 Building SAM application..."
sam build

if [[ $? -eq 0 ]]; then
    echo "🧪 Running local tests..."
    
    # Generate test event if it doesn't exist
    if [[ ! -f "events/event.json" ]]; then
        mkdir -p events
        sam local generate-event apigateway aws-proxy > events/event.json
        echo "📄 Created test event: events/event.json"
    fi
    
    # Get function name from template
    FUNCTION_NAME=$(grep -A 5 "Type: AWS::Serverless::Function" template.yaml | grep -E "^\s+" | head -1 | awk '{print $1}' | tr -d ':')
    
    echo "⚡ Invoking function: $FUNCTION_NAME"
    sam local invoke "$FUNCTION_NAME" --event events/event.json
else
    echo "❌ Build failed"
    exit 1
fi
EOF

    # Create deploy script
    cat > deploy.sh << 'EOF'
#!/bin/bash
# Deploy script for SAM application

ENV=${1:-dev}

echo "🚀 Deploying to environment: $ENV"

# Build first
sam build

if [[ $? -eq 0 ]]; then
    # Deploy with environment-specific parameters
    sam deploy --stack-name "sam-app-$ENV" \
               --s3-bucket "sam-deployments-$ENV" \
               --capabilities CAPABILITY_IAM \
               --parameter-overrides Environment="$ENV"
               
    if [[ $? -eq 0 ]]; then
        echo "✅ Deployment to $ENV completed!"
        
        # Show API endpoint
        aws cloudformation describe-stacks \
            --stack-name "sam-app-$ENV" \
            --query 'Stacks[0].Outputs[?OutputKey==`HelloWorldApi`].OutputValue' \
            --output text 2>/dev/null || echo "Check AWS Console for API endpoint"
    else
        echo "❌ Deployment failed"
    fi
else
    echo "❌ Build failed"
    exit 1
fi
EOF

    # Make scripts executable
    chmod +x dev.sh test.sh deploy.sh
    
    # Create events directory with common event templates
    mkdir -p events
    
    echo "📄 Creating event templates..."
    sam local generate-event apigateway aws-proxy > events/api-event.json
    sam local generate-event s3 put > events/s3-event.json
    sam local generate-event sns notification > events/sns-event.json
    
    # Create .env template
    cat > .env.example << 'EOF'
# Environment variables for local development
# Copy this to .env and update with your values

AWS_PROFILE=dev
AWS_REGION=us-east-1
LOG_LEVEL=DEBUG

# Database
DB_HOST=localhost
DB_NAME=myapp_dev
DB_USER=dev_user
DB_PASS=dev_password

# API Keys (use dummy values for local testing)
EXTERNAL_API_KEY=dummy_key_for_local_testing
EOF

    echo "📋 Development environment ready!"
    echo
    echo "🚀 Quick start commands:"
    echo "   ./dev.sh                 # Start local development server"
    echo "   ./test.sh                # Test functions locally"
    echo "   ./deploy.sh dev          # Deploy to dev environment"
    echo
    echo "📁 Project structure:"
    echo "   template.yaml            # SAM template"
    echo "   dev.sh                   # Development server"
    echo "   test.sh                  # Local testing"
    echo "   deploy.sh                # Deployment script"
    echo "   events/                  # Test event templates"
    echo "   .env.example             # Environment variables template"
    echo
    echo "🔧 Next steps:"
    echo "1. Copy .env.example to .env and update values"
    echo "2. Run: ./dev.sh"
    echo "3. Test your API at: http://localhost:3000"
    echo
else
    echo "❌ Failed to create SAM application"
    exit 1
fi